// Mixins.less
// Snippets of reusable CSS to develop faster and keep code readable
// -----------------------------------------------------------------


// UTILITY MIXINS
// --------------------------------------------------


// Webkit-style focus
// ------------------
@mixin tab-focus() {
  // Default
  outline: thin dotted #333;
  // Webkit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

// Text overflow
// ------------------------
@mixin text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}



// FORMS
// --------------------------------------------------

@mixin input-block-level() {
  display: block;
  width: 100%;
  min-height: 28px; /* Make inputs at least the height of their button counterpart */
  /* Makes inputs behave like true block-level elements */
  @include box-sizing(border-box);
}


// Mixin for form field states
@mixin formFieldState($textColor: #555, $borderColor: #ccc, $backgroundColor: #f5f5f5) {
  // Set the text color
  > label, .help-block, .help-inline {
    color: $textColor;
  }
  // Style inputs accordingly
  input, select, textarea {
    color: $textColor;
    border-color: $borderColor;
    &:focus {
      border-color: darken($borderColor, 10%);
      @include box-shadow(0 0 6px lighten($borderColor, 20%));
    }
  }
  // Give a small background color for input-prepend/-append
  .input-prepend .add-on, .input-append .add-on {
    color: $textColor;
    background-color: $backgroundColor;
    border-color: $textColor;
  }
}


// CSS3 PROPERTIES
// --------------------------------------------------



// Transformations
@mixin rotate($degrees) {
  -webkit-transform: rotate($degrees);
     -moz-transform: rotate($degrees);
      -ms-transform: rotate($degrees);
       -o-transform: rotate($degrees);
          transform: rotate($degrees);
}
@mixin scale($ratio) {
  -webkit-transform: scale($ratio);
     -moz-transform: scale($ratio);
      -ms-transform: scale($ratio);
       -o-transform: scale($ratio);
          transform: scale($ratio);
}
@mixin translate($x: 0, $y: 0) {
  -webkit-transform: translate($x, $y);
     -moz-transform: translate($x, $y);
      -ms-transform: translate($x, $y);
       -o-transform: translate($x, $y);
          transform: translate($x, $y);
}

@mixin skew($x: 0, $y: 0) {
  -webkit-transform: skew($x, $y);
     -moz-transform: skew($x, $y);
      -ms-transform: skew($x, $y);
       -o-transform: skew($x, $y);
          transform: skew($x, $y);
}

@mixin translate3d($x: 0, $y: 0, $z: 0) {
  -webkit-transform: translate($x, $y, $z);
     -moz-transform: translate($x, $y, $z);
      -ms-transform: translate($x, $y, $z);
       -o-transform: translate($x, $y, $z);
          transform: translate($x, $y, $z);
}

// Background clipping
// Heads up: FF 3.6 and under need "padding" instead of "padding-box"

// Background sizing
@mixin background-size($size){
  -webkit-background-size: $size;
     -moz-background-size: $size;
       -o-background-size: $size;
          background-size: $size;
}


// Box sizing
@mixin box-sizing($boxmodel) {
  -webkit-box-sizing: $boxmodel;
     -moz-box-sizing: $boxmodel;
      -ms-box-sizing: $boxmodel;
          box-sizing: $boxmodel;
}

// User select
// For selecting text on the page
@mixin user-select($select) {
  -webkit-user-select: $select;
     -moz-user-select: $select;
       -o-user-select: $select;
          user-select: $select;
}

// Resize anything
@mixin resizable($direction: both) {
  resize: $direction; // Options: horizontal, vertical, both
  overflow: auto; // Safari fix
}


// BACKGROUNDS
// --------------------------------------------------

// Gradients
@mixin gradient-horizontal($startColor: #555, $endColor: #333) {
  background-color: $endColor;
  background-image: -moz-linear-gradient(left, $startColor, $endColor); // FF 3.6+
  background-image: -ms-linear-gradient(left, $startColor, $endColor); // IE10
  background-image: -webkit-gradient(linear, 0 0, 100% 0, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
  background-image: -webkit-linear-gradient(left, $startColor, $endColor); // Safari 5.1+, Chrome 10+
  background-image: -o-linear-gradient(left, $startColor, $endColor); // Opera 11.10
  background-image: linear-gradient(left, $startColor, $endColor); // Le standard
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($startColor)}', endColorstr='#{ie-hex-str($endColor)}', GradientType=1); // IE9 and down
}
@mixin gradient-vertical($startColor: #555, $endColor: #333) {
  background-color: mix($startColor, $endColor, 60%);
  background-image: -moz-linear-gradient(top, $startColor, $endColor); // FF 3.6+
  background-image: -ms-linear-gradient(top, $startColor, $endColor); // IE10
  background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
  background-image: -webkit-linear-gradient(top, $startColor, $endColor); // Safari 5.1+, Chrome 10+
  background-image: -o-linear-gradient(top, $startColor, $endColor); // Opera 11.10
  background-image: linear-gradient(top, $startColor, $endColor); // The standard
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($startColor)}', endColorstr='#{ie-hex-str($endColor)}', GradientType=0); // IE9 and down
}
@mixin gradient-directional($startColor: #555, $endColor: #333, $deg: 45deg) {
  background-color: $endColor;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient($deg, $startColor, $endColor); // FF 3.6+
  background-image: -ms-linear-gradient($deg, $startColor, $endColor); // IE10
  background-image: -webkit-linear-gradient($deg, $startColor, $endColor); // Safari 5.1+, Chrome 10+
  background-image: -o-linear-gradient($deg, $startColor, $endColor); // Opera 11.10
  background-image: linear-gradient($deg, $startColor, $endColor); // The standard
}
@mixin gradient-vertical-three-colors($startColor: #00b3ee, $midColor: #7a43b6, $colorStop: 50%, $endColor: #c3325f) {
  background-color: mix($midColor, $endColor, 80%);
  background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), color-stop($colorStop, $midColor), to($endColor));
  background-image: -webkit-linear-gradient($startColor, $midColor $colorStop, $endColor);
  background-image: -moz-linear-gradient(top, $startColor, $midColor $colorStop, $endColor);
  background-image: -ms-linear-gradient($startColor, $midColor $colorStop, $endColor);
  background-image: -o-linear-gradient($startColor, $midColor $colorStop, $endColor);
  background-image: linear-gradient($startColor, $midColor $colorStop, $endColor);
  background-repeat: no-repeat;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($startColor)}', endColorstr='#{ie-hex-str($endColor)}', GradientType=0); // IE9 and down, gets no color-stop at all for proper fallback
}
@mixin gradient-vertical-four-stops($startColor: #fff, $colorStopTop: 1%, $midTopColor: #ddd, $colorStopMidTop: 2%, $midBottomColor: #999, $colorStopMidBottom: 98%, $endColor: #888, $colorStopBottom: 100%) {
  background-color: mix($midTopColor, $endColor, 80%);
  background-image: -webkit-gradient(linear, 0 0, 0 100%, color-stop($colorStopTop, $startColor), color-stop($colorStopMidTop, $midTopColor), color-stop($colorStopMidBottom, $midBottomColor), color-stop($colorStopBottom, $endColor));
  background-image: -webkit-linear-gradient($startColor $colorStopTop, $midTopColor $colorStopMidTop, $midBottomColor $colorStopMidBottom, $endColor $colorStopBottom);
  background-image: -moz-linear-gradient(top, $startColor $colorStopTop, $midTopColor $colorStopMidTop, $midBottomColor $colorStopMidBottom, $endColor $colorStopBottom);
  background-image: -ms-linear-gradient($startColor $colorStopTop, $midTopColor $colorStopMidTop, $midBottomColor $colorStopMidBottom, $endColor $colorStopBottom);
  background-image: -o-linear-gradient($startColor $colorStopTop, $midTopColor $colorStopMidTop, $midBottomColor $colorStopMidBottom, $endColor $colorStopBottom);
  background-image: linear-gradient($startColor $colorStopTop, $midTopColor $colorStopMidTop, $midBottomColor $colorStopMidBottom, $endColor $colorStopBottom);
  background-repeat: no-repeat;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str(lighten($startColor, 10%))}', endColorstr='#{ie-hex-str($endColor)}', GradientType=0); // IE9 and down, gets no color-stop at all for proper fallback
}
@mixin gradient-radial($innerColor: #555, $outerColor: #333)  {
  background-color: $outerColor;
  background-image: -webkit-gradient(radial, center center, 0, center center, 460, from($innerColor), to($outerColor));
  background-image: -webkit-radial-gradient(circle, $innerColor, $outerColor);
  background-image: -moz-radial-gradient(circle, $innerColor, $outerColor);
  background-image: -ms-radial-gradient(circle, $innerColor, $outerColor);
  background-image: -o-radial-gradient(circle, $innerColor, $outerColor);
  background-repeat: no-repeat;
}
@mixin gradient-striped($color, $angle: -45deg) {
  background-color: $color;
  background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(.25, rgba(255,255,255,.15)), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, rgba(255,255,255,.15)), color-stop(.75, rgba(255,255,255,.15)), color-stop(.75, transparent), to(transparent));
  background-image: -webkit-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
  background-image: -moz-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
  background-image: -ms-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
  background-image: -o-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
  background-image: linear-gradient($angle, rgba(255,255,255,.15) 25%, rgba(255,255,255,0) 25%, rgba(255,255,255,0) 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, rgba(255,255,255,0) 75%, rgba(255,255,255,0));
}
// Reset filters for IE
@mixin reset-filter() {
  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);
}


// COMPONENT MIXINS
// --------------------------------------------------

// Horizontal dividers
// -------------------

// Button backgrounds
// ------------------
@mixin buttonBackground($startColor, $endColor) {
  // gradientBar will set the background to a pleasing blend of these, to support IE<=9
  @include gradientBar($startColor, $endColor);
  @include reset-filter();

  // in these cases the gradient won't cover the background, so we override
  &:hover, &:active, &.active, &.disabled, &[disabled] {
    background-color: $endColor;
  }

  // IE 7 + 8 can't handle box-shadow to show active, so we darken a bit ourselves
  &:active, &.active {
    background-color: darken($endColor, 10%) \9;
  }
}

// Navbar vertical align
// -------------------------
// Vertically center elements in the navbar.
// Example: an element has a height of 30px, so write out `.navbarVerticalAlign(30px);` to calculate the appropriate top margin.
@mixin navbarVerticalAlign($elementHeight) {
  margin-top: ($navbarHeight - $elementHeight) / 2;
}

// Popover arrows
// -------------------------
// For tipsies and popovers
// @mixin popoverArrowTop($arrowWidth: 5px, $color: $black) {
//   bottom: 0;
//   left: 50%;
//   margin-left: -$arrowWidth;
//   border-left: $arrowWidth solid transparent;
//   border-right: $arrowWidth solid transparent;
//   border-top: $arrowWidth solid $color;
// }
// @mixin popoverArrowLeft($arrowWidth: 5px, $color: $black) {
//   top: 50%;
//   right: 0;
//   margin-top: -$arrowWidth;
//   border-top: $arrowWidth solid transparent;
//   border-bottom: $arrowWidth solid transparent;
//   border-left: $arrowWidth solid $color;
// }
// @mixin popoverArrowBottom($arrowWidth: 5px, $color: $black) {
//   top: 0;
//   left: 50%;
//   margin-left: -$arrowWidth;
//   border-left: $arrowWidth solid transparent;
//   border-right: $arrowWidth solid transparent;
//   border-bottom: $arrowWidth solid $color;
// }
// @mixin popoverArrowRight($arrowWidth: 5px, $color: $black) {
//   top: 50%;
//   left: 0;
//   margin-top: -$arrowWidth;
//   border-top: $arrowWidth solid transparent;
//   border-bottom: $arrowWidth solid transparent;
//   border-right: $arrowWidth solid $color;
// }
// 
// // Grid System
// // -----------
// 
// // Table columns
// @mixin tableColumns($columnSpan: 1) {
//   float: none; // undo default grid column styles
//   width: (($gridColumnWidth) * $columnSpan) + ($gridGutterWidth * ($columnSpan - 1)) - 16; // 16 is total padding on left and right of table cells
//   margin-left: 0; // undo default grid column styles
//}

// Make a Grid
// Use .makeRow and .makeColumn to assign semantic layouts grid system behavior
// @mixin makeRow() {
//   margin-left: $gridGutterWidth * -1;
//   @include clearfix();
// }
// @mixin makeColumn($columns: 1) {
//   float: left;
//   margin-left: $gridGutterWidth;
//   width: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1));
// }



// Fixed Grid
@mixin gridCore($gridColumnWidth, $gridGutterWidth) {
	.row {
		margin-left: $gridGutterWidth * -1;
	    @include clearfix();
	
		> [class*="span"] {
		  float: left;
		  margin-left: $gridGutterWidth;
		}

		@for $i from 1 through $gridColumns {
		  > .span#{$i} { @include gridCoreSpan($i, $gridColumnWidth, $gridGutterWidth) }
		}

		@for $i from 1 through $gridColumns {
		  > .offset#{$i} { @include gridCoreOffset($i, $gridColumnWidth, $gridGutterWidth) }
		}
	}

  .container, .navbar-fixed-top .container, .navbar-fixed-bottom .container {
    @include gridCoreSpan($gridColumns, $gridColumnWidth, $gridGutterWidth);
  }
}

@mixin gridCoreSpan($columns, $gridColumnWidth, $gridGutterWidth) {
  width: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1));
}

@mixin gridCoreOffset($columns, $gridColumnWidth, $gridGutterWidth) {
  margin-left: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1)) + ($gridGutterWidth * 2);
}



// Fluid Grid
@mixin gridFluidSpan($columns) {
	width: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 2));
}

@mixin makeFluidRow {
	width: 100%;
    @include clearfix();
    > [class*="span"] {
      float: left;
      margin-left: $fluidGridGutterWidth * 2;
	  
	  // To make sure spans don't wrap in IE7 due to pixel/percentage discrepancies
	  // Can stay here because it's fine to apply in other browsers as well
	  clear: right;
    }
    > [class*="span"]:first-child {
      margin-left: 0;
    }
    @for $i from 1 through $gridColumns {
      > .span#{$i} { @include gridFluidSpan($i); }
    }
}


@mixin gridFluid {
	.row-fluid { @include makeFluidRow; }
}

@mixin makeFluidColumn($columns) {
  // This isn't perfect, but it's better than nothing.
  float: left;
  margin-left: $fluidGridGutterWidth;
  @include gridFluidSpan($columns);
}